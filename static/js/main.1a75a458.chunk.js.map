{"version":3,"sources":["redux/contacts/contacts-actions.js","Components/Form/Form.js","Components/ConatctsList/ContactsListItem.js","Components/Filter/Filter.js","Components/ConatctsList/ConatctsList.js","Components/App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","userName","userNumber","payload","id","uuidv4","name","number","deleteContact","changeFilter","Form","state","onSubmit","e","preventDefault","props","setState","onChange","currentTarget","value","className","this","type","pattern","title","required","Component","connect","dispatch","contactsActions","contacts","items","map","el","onClick","target","filter","toLowerCase","includes","App","createReducer","data","localStorage","getItem","console","log","JSON","parse","initData","actions","contactsArr","forEach","push","alert","setItem","stringify","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a75a458.chunk.js","sourcesContent":["import types from './contacts-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contacts/add', (userName, userNumber) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name: userName,\r\n    number: userNumber,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/find');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addContact(this.state.name, this.state.number);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form\" onSubmit={this.onSubmit}>\r\n        <label className=\"label\">\r\n          Name{' '}\r\n          <input\r\n            value={this.state.name}\r\n            className=\"label\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={this.onChange}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className=\"label\">\r\n          Phone{' '}\r\n          <input\r\n            value={this.state.number}\r\n            className=\"label\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            onChange={this.onChange}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className=\"button\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: (userName, userNumber) =>\r\n    dispatch(contactsActions.addContact(userName, userNumber)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","import { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nfunction ContactsListItem({ contacts, deleteContact }) {\r\n  return contacts.map(el => {\r\n    return (\r\n      <li key={el.id}>\r\n        {el.name}: {el.number}\r\n        <button\r\n          className=\"button\"\r\n          type=\"button\"\r\n          id={el.id}\r\n          onClick={e => {\r\n            deleteContact(e.target.id);\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: state.contacts.items,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsListItem);\r\n","import { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nfunction Filter({ contacts, filter, deleteContact }) {\r\n  const findUsers = () => {\r\n    return contacts.filter(el =>\r\n      el.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  return findUsers().map(el => {\r\n    return (\r\n      <li key={el.id}>\r\n        {el.name}: {el.number}\r\n        <button\r\n          className=\"button\"\r\n          type=\"button\"\r\n          id={el.id}\r\n          onClick={e => {\r\n            deleteContact(e.target.id);\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: state.contacts.items,\r\n    filter: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import ContactsListItem from './ContactsListItem';\r\nimport Filter from '../Filter/Filter';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nfunction ContactsList({ filter, changeFilter }) {\r\n  return (\r\n    <>\r\n      <h3>Find contacts by name</h3>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        onChange={e => changeFilter(e.currentTarget.value)}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n      <ul>{!filter ? <ContactsListItem /> : <Filter />}</ul>\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: state.contacts.items,\r\n    filter: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeFilter: value => dispatch(contactsActions.changeFilter(value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","// import { useState, useEffect } from 'react';\r\nimport Form from './Form/Form';\r\nimport ContactsList from './ConatctsList/ConatctsList';\r\nimport './styles.css';\r\n\r\nexport default function App() {\r\n  // useEffect(() => {\r\n  //   const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\r\n  //   if (parsedContacts) {\r\n  //     setContacts(parsedContacts);\r\n  //   }\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  // }, [contacts]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Form />\r\n      <h2>Contacts</h2>\r\n      <ContactsList />\r\n    </div>\r\n  );\r\n}\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport actions from './contacts-actions';\r\n// import types from './contacts-types';\r\n\r\n// contacts: {\r\n//     items: [],\r\n//     filter: '',\r\n//   },\r\n\r\nconst initData = () => {\r\n  const data = localStorage.getItem('contacts');\r\n  if (data) {\r\n    console.log(JSON.parse(data));\r\n    return JSON.parse(data);\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nconst items = createReducer(initData(), {\r\n  [actions.addContact]: (state, { payload }) => {\r\n    const contactsArr = [];\r\n    state.forEach(el => {\r\n      contactsArr.push(el.name, el.number);\r\n    });\r\n\r\n    if (contactsArr.includes(payload.number || payload.name.toLowerCase())) {\r\n      alert('This person or number is already in contacts');\r\n      return state;\r\n    } else {\r\n      localStorage.setItem('contacts', JSON.stringify([...state, payload]));\r\n      return [...state, payload];\r\n    }\r\n  },\r\n  [actions.deleteContact]: (state, { payload }) => {\r\n    localStorage.setItem(\r\n      'contacts',\r\n      JSON.stringify(state.filter(({ id }) => id !== payload)),\r\n    );\r\n    return state.filter(({ id }) => id !== payload);\r\n  },\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import contactsReducer from './contacts/contacts-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\n// contacts: {\r\n//     items: [],\r\n//     filter: '',\r\n//   },\r\n\r\n// {\r\n//    items: [],\r\n//    filter: '',\r\n// },\r\n\r\n// const initData = () => {\r\n//   const data = localStorage.getItem('contacts');\r\n//   if (data) {\r\n//     console.log(JSON.parse(data));\r\n//     return JSON.parse(data);\r\n//   } else {\r\n//     return [];\r\n//   }\r\n// };\r\n\r\n// const store = configureStore({\r\n//   reducer: reducer,\r\n//   middleware: middleware,\r\n//   devTools: process.env.NODE_ENV === 'development',\r\n//   preloadedState: preloadState,\r\n// });\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  // preloadedState: preloadState,\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './Components/App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}